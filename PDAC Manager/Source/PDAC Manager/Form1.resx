<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="trackBar_sensitivityRelease.ToolTip" xml:space="preserve">
    <value>How sensitive is your Slider to your finger RELEASING it.
Higher the value is, easier it will stop triggering.
Make it as high possible before your slider start to continue registering your finger even while not touching it
</value>
  </data>
  <data name="label3.ToolTip" xml:space="preserve">
    <value>How sensitive is your Slider to your finger RELEASING it.
Higher the value is, easier it will stop triggering.
Make it as high possible before your slider start to continue registering your finger even while not touching it
</value>
  </data>
  <data name="label5.ToolTip" xml:space="preserve">
    <value>what level of our custom filtering the Slider will use.
Use this filter ONLY if you have false positive results, and can't make the sensitivity lower to fix it.

More filtering you will use, easier it will be for the slider to miss a fast slide movement,
but it will ignore false positive on some cycles, make it more stable.</value>
  </data>
  <data name="comboBox_customFilter.ToolTip" xml:space="preserve">
    <value>what level of our custom filtering the Slider will use.
Use this filter ONLY if you have false positive results, and can't make the sensitivity lower to fix it.

More filtering you will use, easier it will be for the slider to miss a fast slide movement,
but it will ignore false positive on some cycles, make it more stable.</value>
  </data>
  <data name="label6.ToolTip" xml:space="preserve">
    <value>Change how the LEDs behave in Gameplay Mode.


HORI: 
LEDs are OFF and light up only on touch, like the HORI Arcade Controller.

HORI + Arcade: 
LEDs are ON but switch OFF immediately on touching, lighting up the touched ones.

Arcade: 
LEDs are ON and fade in and out when touching the slider, like the Arcade cab. (Recommended)</value>
  </data>
  <data name="comboBox_ledsMode.ToolTip" xml:space="preserve">
    <value>Change how the LEDs behave in Gameplay Mode.


HORI: 
LEDs are OFF and light up only on touch, like the HORI Arcade Controller.

ARCADE: 
LEDs are ON and fade in and out when touching the slider, like the Arcade cab.

FULL ARCADE: 
Same as ARCADE mode, but with a lot of simulated effects from the Arcade cab on top.</value>
  </data>
  <data name="trackBar_calibration.ToolTip" xml:space="preserve">
    <value>How many sensors have to be fully calibrated to exit Calibration mode.

Basically we want to wait for the 32 sensors to be calibrated,
but if you have some sensors too weak, it could stay in calibration process because it never
go low enough to confirm it is calibrated.
So if the calibration never end, testing less sensors could resolve it.

If you don't test the 32 sensors, please remember that even if you exited the Calibration process, 
maybe some sensors are still calibrating.
So just wait a little more seconds before using your slider.</value>
  </data>
  <data name="label7.ToolTip" xml:space="preserve">
    <value>How many sensors have to be fully calibrated to exit Calibration mode.

Basically we want to wait for the 32 sensors to be calibrated,
but if you have some sensors too weak, it could stay in calibration process because it never
go low enough to confirm it is calibrated.
So if the calibration never end, testing less sensors could resolve it.

If you don't test the 32 sensors, please remember that even if you exited the Calibration process, 
maybe some sensors are still calibrating.
So just wait a little more seconds before using your slider.</value>
  </data>
  <data name="label8.ToolTip" xml:space="preserve">
    <value>If you use the NAV Shortcut Mode to have more buttons on your controller that you physically have,
please select if you prefer holding the button to go into that mode, or just pressing once to switch it on/off.</value>
  </data>
  <data name="comboBox_navMode.ToolTip" xml:space="preserve">
    <value>If you use the NAV Shortcut Mode to have more buttons on your controller that you physically have,
please select if you prefer holding the button to go into that mode, or just pressing once to switch it on/off.</value>
  </data>
</root>